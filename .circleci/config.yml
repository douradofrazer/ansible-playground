version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Choose either one of the orbs below
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3

commands:
  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
              --region us-east-1
  
  # configure_infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #             # You can get this ID in the section where you registered the SSH Key
  #             fingerprints: ["96:48:0c:34:6a:14:b5:a9:7a:5a:7b:8a:2d:8e:41:20"] 
  #     - run:
  #         name: Install Ansible
  #         command: |
  #           apk add --update ansible
  #     - run:
  #         name: Install openssh # resolves {"changed": false, "msg": "unpack requires a buffer of 4 bytes", "unreachable": true}
  #         command: | 
  #            apk add openssh-client
  #     - run:
  #         name: Run Playbook and Configure server
  #         command: |
  #           ansible-playbook -vvvv -i ~/inventory.txt -c ssh playbook.yml
  
  # smoke_test:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - run: apk add --update curl
  #     - run:
  #         name: smoke test
  #         command: |
  #           URL="https://blog.udacity.com/"
  #           # Test if website exists
  #           if curl -s --head ${URL} 
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi

  # simulating a failure to test rollback
  smoke_test:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
          name: Test job
          # Fail the job intentionally to simulate an error.
          command:  return 1
      - destroy_environment


workflows:
  my_workflow:
    jobs:
      - create_infrastructure
      # - configure_infrastructure
      - smoke_test:
          requires:
            - create_infrastructure